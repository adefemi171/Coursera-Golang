fmt.Println("1. To input a new animal use >newanimal AnimalName AnimalType example: >newanimal Dog Dog")
	fmt.Println("2. To Query an animal use >query AnimalName infoRequested example: >query cow move")
	fmt.Println("3. Enter x to exit")












package main

import (
	"fmt"
)

type animal_interface interface {
	Move()
	Speak()
	Eat()
}

type Animal struct {
	food  string
	move  string
	sound string
}

func (a Animal) Eat() {
	fmt.Println(a.food)
}

func (a Animal) Move() {
	fmt.Println(a.move)
}

func (a Animal) Speak() {
	fmt.Println(a.sound)
}

func main() {
	var animals map[string]Animal
	animals = map[string]Animal{
		"cow":   Animal{"grass", "walk", "moo"},
		"bird":  Animal{"worms", "fly", "peep"},
		"snake": Animal{"mice", "slither", "hsss"},
	}

	var inter animal_interface
	var command, animal, type_req string
	for true {
		fmt.Printf("> ")
		fmt.Scan(&command, &animal, &type_req)

		if command == "newanimal" {
			animals[animal] = animals[type_req]
		}

		if command == "query" {
			inter = animals[animal]
			switch type_req {
			case "eat":
				inter.Eat()
			case "move":
				inter.Move()
			case "speak":
				inter.Speak()
			default:
				fmt.Println("Invalid request, try again!")
			}
		}
	}
}
